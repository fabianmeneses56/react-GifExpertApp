{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAkBhD,OACE,0BAAMC,SAZa,SAACC,GAEpBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAKFI,MAAMF,GALJ,cAKfG,EALe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbjB,kBAgBdM,GAhBc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEnC,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KA0BxC,OApBAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GAGpBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAId,CAACpB,IAUGqB,EDpByBK,CAAc1B,GAAjCa,EAJ0B,EAI/BN,KAAYa,EAJmB,EAInBA,QASpB,OACE,oCACE,wBAAIJ,UAAU,qCAAqChB,GAElDoB,GAAW,uBAAGJ,UAAU,oCAAb,YAEZ,yBAAKA,UAAU,aACb,wBAAIA,UAAU,WACXH,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eACEiB,IAAKjB,EAAIC,IACLD,WEzBLkB,EAAe,WAAO,IAAD,EACI1C,mBAAS,CAAC,mBADd,mBACzB2C,EADyB,KACb5C,EADa,KAQhC,OACE,6BACE,oCACE,4CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAG5B,4BAEI4C,EAAWpB,KAAI,SAACT,GAAD,OACb,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,W,MCjBhD8B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.e829f1f2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setcategories }) => {\r\n  const [inputValue, setinputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setinputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    /* prevenir que la pagina se actualice por navegador */\r\n    e.preventDefault();\r\n\r\n    /* validacion de que hallna mas de 2 letras */\r\n    if (inputValue.trim().length > 2) {\r\n      setcategories((cats) => [inputValue, ...cats]);\r\n      setinputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setcategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=A7b5NWmLtJvK27PgTsREbIoSu7RB8doH`;\r\n\r\n  const resp = await fetch(url);\r\n\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n  /* al no tener set images lo retornamos\r\n    console.log(gifs);\r\n    setimages(gifs); */\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  /* console.log(title,url); */\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\n// EN ESTE SE IMPLEMENTO UN CUSTOM HOOK QUE HACE EL TRABAJO PESADO\r\nexport const GifGrid = ({ category }) => {\r\n                    /*   const [images, setimages] = useState([]); */\r\n\r\n                    /* use effect es como el component didmount */\r\n  const { data:images,loading } = useFetchGifs( category );\r\n                    /*  useEffect(() => {\r\n                        //getGifs(); -> como ya no tengo el getgifs lo importo\r\n                        getGifs(category).then(setimages);\r\n                        //.then(imgs=>setimages(imgs))\r\n                    }, [category]); */\r\n\r\n                    /*  getGifs(); */\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n      {loading && <p className=\"animate__animated animate__flash\">cargando</p>}\r\n     \r\n      <div className=\"card-grid\">\r\n        <ol className=\"ol-grid\">\r\n          {images.map((img) => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img}\r\n              //img={img}\r\n            />\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/GetGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      //setTimeout(() => {\r\n         /*  console.log(imgs) */\r\n        setstate({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      //}, 3000);\r\n    });\r\n  }, [category]);\r\n\r\n  /* devuelve lo que esta adentro despues del tiempo establecido */\r\n  /*    setTimeout( ()=>{\r\n        setstate({\r\n            data:[1,2,3,4],\r\n            loading: false\r\n        })\r\n    },3000); */\r\n\r\n  return state; // data y loading\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setcategories] = useState([\"ester exposito\"]);\r\n\r\n  /* const agregarCate=()=>{\r\n        setcategories([...categories,'salamanca'])\r\n        //setcategories(cats=>[...categories,'salamanca'])\r\n    } */\r\n\r\n  return (\r\n    <div>\r\n      <>\r\n        <h1>GifExpertApp</h1>\r\n        <hr />\r\n        <AddCategory setcategories={setcategories} />\r\n        {/*  <button onClick={agregarCate}>Agregar</button> */}\r\n\r\n        <ol>\r\n          {\r\n            categories.map((category) => (\r\n              <GifGrid key={category} category={category} />\r\n            ))\r\n\r\n            /* categories.map( category => {\r\n                return <li key={ category }>{ category }</li>\r\n                }) */\r\n          }\r\n        </ol>\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n \n  \n);\n\n\n\n\n\n"],"sourceRoot":""}